/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "Processor.h"


//==============================================================================
SilverbirdAudioProcessor::SilverbirdAudioProcessor()
{
}

SilverbirdAudioProcessor::~SilverbirdAudioProcessor()
{
}

//==============================================================================
const String SilverbirdAudioProcessor::getName() const
{
    return ProjectInfo::projectName;
}

int SilverbirdAudioProcessor::getNumParameters()
{
    return 1;
}

float SilverbirdAudioProcessor::getParameter (int index)
{
    return 0.0f;
}

void SilverbirdAudioProcessor::setParameter (int index, float newValue)
{
}

const String SilverbirdAudioProcessor::getParameterName (int index)
{
    return String("");
}

const String SilverbirdAudioProcessor::getParameterText (int index)
{
    return String("");
}

const String SilverbirdAudioProcessor::getInputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

const String SilverbirdAudioProcessor::getOutputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

bool SilverbirdAudioProcessor::isInputChannelStereoPair (int index) const
{
    return true;
}

bool SilverbirdAudioProcessor::isOutputChannelStereoPair (int index) const
{
    return true;
}

bool SilverbirdAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool SilverbirdAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool SilverbirdAudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double SilverbirdAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int SilverbirdAudioProcessor::getNumPrograms()
{
    return 2;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int SilverbirdAudioProcessor::getCurrentProgram()
{
    return 0;
}

void SilverbirdAudioProcessor::setCurrentProgram (int index)
{
}

const String SilverbirdAudioProcessor::getProgramName (int index)
{
    return String("SB Program 1");
}

void SilverbirdAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void SilverbirdAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    // Use this method as the place to do any pre-playback
    // initialisation that you need..
}

void SilverbirdAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

void SilverbirdAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    // is overridden by controller
}

//==============================================================================
bool SilverbirdAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}



//==============================================================================
void SilverbirdAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void SilverbirdAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}
